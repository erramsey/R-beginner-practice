#Exploratory data analysis

#Questions
  #Use quesitons as a tool to guide your investigation into developing an understanding of your data
  #Questions help focus attention on a specific part of a dataset
  #Generate a large quantity of questions
  #Follow up each question with a new question based on what you find
  #Two types of questions are always useful:
    #1. What type of variation occurs within my variables?
    #2. What type of covariation occurs between my variables?

#Variation
  #Variation: The tendency of the values of a variable to change from measurement to measurement
  #Each variable has its own pattern of variation, which can reveal interesting info about it
    #Between and across observations

  #Useful info you'll find in graphs:
  #Typical values
    #Which values are the most common? Why?
    #Which values are rare? Why? Does that match your expectations?
    #Can you see any unusual patterns? What might explain them?
    #ex.
    smaller <- diamonds |>
      filter(carat < 3)
    ggplot(smaller, aes(x=carat)) +
      geom_histogram(binwidth = 0.01)
      #Why are more diamonds at whole carats and common fractions of carats?
      #Why are there more diamonds slightly to the right of each peak than to the left?
    #Visualizations can also reveal clusters, which suggest subgroups exist in data
      #How are the observations within each subgroup similar to each other?
      #How are the observations in separate clusters different from each other?
      #How can you explain or describe the clusters?
      #Why might the appearance of clusters be misleading?
    
#Unusual values
  #Outliers: typo, extremes, suggest important discoveries
  #With a lot of data they might be hard to see
    ggplot(diamonds, aes(x = y)) +
      geom_histogram(binwidth = 0.5)
    #Use coord_cartesian() to zoom to smaller values of the y-axis
    ggplot(diamonds, aes(x = y)) +
      geom_histogram(binwidth = 0.5) +
      coord_cartesian(ylim = c(0, 50))
    #Also has a x_lim() argument to zoom into the x-axis
    #Use splyr to pluck out unusual values
    unusual <- diamonds |>
      filter(y < 3 | y > 20) |>
      select(price, x, y, z) |>
      arrange(y)
    #y can't equal 0, so these values must be incorrect (missing data)
      #Re-code as NA to prevent misleading calculations
    #Measurements of 32mm and 59mm are implausable: over an inch long but don't cost enough
  #If outliers have minimal effect on results and you can't figure why they're there: omit
  #If outliers have substantial effect on results: don't drop without justification
    #Figure out what caused them and disclose that they were removed in write-up
    
  #Exercises:
      #1. Explore the distribution of each of the x, y, and z variables in diamonds. What do you learn? 
      #   Think about a diamond and how you might decide which dimension is the length, width, and depth
        ggplot(diamonds, aes(x = x)) +
          geom_histogram(binwidth = 0.01) 
        ggplot(diamonds, aes(x = y)) +
          geom_histogram(binwidth = 0.01) 
        ggplot(diamonds, aes(x = z)) +
          geom_histogram(binwidth = 0.01) 
        #x = x has few outliers, main range 4-10. 
        #x = y main range ~ 5-10, outliers
        #x = z  main range 2-7, outliers
        #Data is 'spiky'     
        #All right skewed
        #To see summary data (to see outliers):
        summary(select(diamonds, x, y, z))
        #To examine outliers with 0 data:
        filter(diamonds, x == 0 | y == 0 | z == 0)
        #To see extreme values
        diamonds |>
          arrange(desc(y)) |>
          head()
        diamonds |>
          arrange(desc(z)) |>
          head()
        #Check scatterplots to see plausability of outliers
        ggplot(diamonds, aes(x = x, y = y)) +
          geom_point()  
        ggplot(diamonds, aes(x = x, y = z)) +
          geom_point()
        ggplot(diamonds, aes(x = z, y = y)) +
          geom_point()
        #Examining after removing outlieres
        filter(diamonds, x > 0, x < 10) %>%
          ggplot() +
          geom_histogram(mapping = aes(x = x), binwidth = 0.01) +
          scale_x_continuous(breaks = 1:10)
        filter(diamonds, z > 0, z < 10) %>%
          ggplot() +
          geom_histogram(mapping = aes(x = z), binwidth = 0.01) +
          scale_x_continuous(breaks = 1:10)  
        #Skewedness is natural (there are more small diamonds than large)
        #Why spikes? Maybe some measuring technique
    #2. Explore the distribution of price. Do you discover anything unusual or surprising? 
        #(Hint: Carefully think about the binwidth and make sure you try a wide range of values.)
        ggplot(diamonds, aes(x = price)) +
          geom_histogram() 
        ggplot(diamonds, aes(x = price)) +
          geom_histogram(binwidth = 10) 
        #Heavily right skewed
        #There's a weird cut at one point
        ggplot(diamonds, aes(x = price)) +
          geom_histogram(binwidth = 10) +
          coord_cartesian(ylim = c(0, 100), xlim = c(1000,2000))
        #No data around 1500        
        #Values start around 300
        #bulges around 750
        diamonds |>
          mutate(ending = price %% 10) |>
          ggplot(aes(x = ending)) +
          geom_histogram(binwidth = 1, center = 0)
    #How many diamonds are 0.99 carat? How many are 1 carat? What do you think is the cause of the difference?
      carat99 <- filter(diamonds, carat == 0.99)
      carat1 <- filter(diamonds, carat == 1)
      #1558 obs for carat = 1, 23 for carat = 0.99
      #It's probably better to sell if rounding up
      #To examine summary sums:
      diamonds |>
        filter(carat >= 0.99, carat <= 1) |>
        count(carat)

      diamonds %>%
        filter(carat >= 0.9, carat <= 1.1) %>%
        count(carat) %>%
        print(n = Inf)
      
#Unusual values
  #If you want to move on to the rest of your analysis (and not analyze these values)
    #1. Drop the entire row with the strange values
      diamonds2 <- diamonds |>
        filter(between(y, 3, 20))
      #This is not recommended. Other values for the obs may still be valid. Gets rid of too much data
    #2. Replace the unusual values with missing values
      diamonds2 <- diamonds |>
        mutate(y = if_else(y < 3 | y > 20, NA, y))
      #ggplot will warn that the values are missing. Remove warning with na.rm = TRUE
      ggplot(diamonds2, aes(x = x, y = y)) +
        geom_point(na.rm = TRUE)
  #If you want to understand what makes missing values different to obs with recorded values
    #For example, in nycflights13::flights na means canceled flight
    #Use is.(na) to check if dep_time is missing, to compare schedule departure time for canceled and non-canceled
      nycflights13::flights |>
        mutate(
          cancelled = is.na(dep_time),
          sched_hour = sched_dep_time %/% 100,
          sched_min = sched_dep_time %% 100,
          sched_dep_time = sched_hour + (sched_min / 60)
        ) |>
        ggplot(aes(x = sched_dep_time)) +
        geom_freqpoly(aes(color = cancelled), binwidth = 1/4)

  #Exercises
    #1. For a histogram, missing values are removed when the number of observations in each bin are calculated.
      #In the geom_bar() function, NA is treated as another category.
      diamonds %>%
        mutate(cut = if_else(runif(n()) < 0.1, NA_character_, as.character(cut))) %>%
        ggplot() +
        geom_bar(mapping = aes(x = cut))
      #In histogram x must be numeric. In geom bar it counts na as another category
    #3. 
      nycflights13::flights |>
        mutate(
          cancelled = is.na(dep_time),
          sched_hour = sched_dep_time %/% 100,
          sched_min = sched_dep_time %% 100,
          sched_dep_time = sched_hour + (sched_min / 60)
        ) |>
        ggplot(aes(x = sched_dep_time)) +
        geom_freqpoly(aes(color = cancelled), binwidth = 1/4) +
        facet_wrap(~cancelled, scales = "free_y") #!!! The important part
      
#Covariation
  #The behavior between variables
  #Covariation: The tendency for the values of two or more variables to vary together in a related way
  #Spot by visualizing the relationship between two or more var
  
  #A categorical an numerical variable
    #ex
      ggplot(diamonds, aes(x = price)) + 
        geom_freqpoly(aes(color = cut), binwidth = 500, linewidth = 0.75)
      #Hard to compare shapes because the height varies too much    
      #Replace count on y-axis with density (the count standardized so that the area under each freq polygon is 1)
      ggplot(diamonds, aes(x = price, y = after_stat(density))) + 
        geom_freqpoly(aes(color = cut), binwidth = 500, linewidth = 0.75)
        #after_stat is used to calculate density 
    #Another way: boxplot
      ggplot(diamonds, aes(x = cut, y = price)) +
        geom_boxplot()
      #Note: use fct_reorder() to reorder       
      ggplot(mpg, aes(x = fct_reorder(class, hwy, median), y = hwy)) +
        geom_boxplot()
        #Reorder by median value of hwy
      #Flip sideways by switching x and y aesthetic mappings
      ggplot(mpg, aes(x = hwy, y = fct_reorder(class, hwy, median))) +
        geom_boxplot()

  #Exercises
    #1. 
      nycflights13::flights |>
        mutate(
          cancelled = is.na(dep_time),
          sched_hour = sched_dep_time %/% 100,
          sched_min = sched_dep_time %% 100,
          sched_dep_time = sched_hour + (sched_min / 60)
        ) |>
        ggplot(aes(x = cancelled, y = sched_dep_time)) +
         geom_boxplot()
    #2. 
      ggplot(diamonds, aes(x = cut, y = carat)) +
        geom_boxplot() 
      ggplot(diamonds, aes(x = carat, y = price)) +
        geom_point() 
      #Because so many points, use a boxplot by binning carrot 
      ggplot(data = diamonds, mapping = aes(x = carat, y = price)) +
        geom_boxplot(mapping = aes(group = cut_width(carat, 0.1)), orientation = "x")
    #3. Use coord_flip() to flip boxplot
      ggplot(diamonds, aes(x = cut, y = carat)) +
        geom_boxplot() +
        coord_flip()
      ggplot(diamonds, aes(x = carat, y = cut)) +
        geom_boxplot()
        #The two are identical
    #4. Boxplots can have too many outliers. Instead you can use letter value plot
      library('lvplot')
      ggplot(diamonds, aes(x = cut, y = price)) +
        geom_lv()
    #5.
      #Histogram and violin: easy to visually distinguish differences in the overall shape of the distributions
      ggplot(diamonds, aes(x = cut, y = price)) +
        geom_violin()
      ggplot(diamonds, aes(x=price)) +
        geom_histogram() + 
        facet_wrap(~cut)
      #freqpoly: better for look-up (given a price, it is easy to tell which cut has the highest density)
      ggplot(diamonds, aes(x=price, color = cut)) +
        geom_freqpoly()
      ggplot(diamonds, aes(x=price, color = cut)) +
        geom_density()
      
  #Two categorical variables
    #To see covariation, count the number of obs for each combo of levels of these var
      ggplot(diamonds, aes(x = cut, y = color)) +
        geom_count()
    #Can compute counts with dplyr
      diamonds |>
        count(color, cut)
      #Then visualize with geom_tile()
      diamonds |>
        count(color, cut) |>
        ggplot(aes(x = color, y = cut)) +
        geom_tile(aes(fill = n))
    #You can use the seriation package to simultaniously reorder rows and columns
    #heatmaply for larger plots
   
  #Exercises
    #1. How could you rescale the count dataset above to more clearly show the distribution of cut within color, or color within cut?
      #Use gorup mutate to calculate a new variable prop which is the proportion of each cut within a color
      diamonds |>
        count(color, cut) |>
        group_by(color) |>
        mutate(prop = n / sum(n)) |>
        ggplot(mapping = aes(x = color, y = cut)) +
        geom_tile(mapping = aes(fill = prop))   
    #2. 
      ggplot(diamonds, aes(x = color, fill = cut)) +
        geom_bar()
    #3. Use geom_tile() together with dplyr to explore how average flight delays vary by destination and month of year
      nycflights13::flights |>
        group_by(month, dest) |>
        summarise(dep_delay = mean(dep_delay, na.rm = TRUE)) |>
        ggplot(aes(x = factor(month), y = dest, fill = dep_delay)) +
        geom_tile() +
        labs(x = "Month", y = "Destination", fill = "Departure Delay")
      #Hard to read Y axis. There are missing values
      #Usually best to have longer labels on y axis for easy reading
      #Usually best to have categorical var with large number of categoires on Y
      
  #Two numerical variables
    #Scatter plot
      ggplot(smaller, aes(x = carat, y = price))+
        geom_point()
      #Less useful with large dataset because overplotting
      #Can fix with alpha aesthetic to add transparency
    #Another option: use bin to bin in two-dimensions
      ggplot(smaller, aes(x = carat, y = price)) +
        geom_bin2d()
        #Can also use geom_hex but you need library(hexbin). /For hexagonal bins
      ggplot(smaller, aes(x = carat, y = price)) +
        geom_hex()
    #Bin one congtinuous variable so it acts like a categorical var
      #Bin carat and then for each group display a boxplot
      ggplot(smaller, aes(x = carat, y = price)) +
        geom_boxplot(aes(group = cut_width(carat, 0.1)))
        #cut_width divides x into bins with a width of width
      #Use varwidth = TRUE to make the width ov the boxplot proportional to the number of points
      ggplot(smaller, aes(x = carat, y = price)) +
        geom_boxplot(varwidth = TRUE, aes(group = cut_width(carat, 0.1)))
  
  #Exercises
    #1.     
      ggplot(smaller, aes(color = cut_number(carat, 5), x = price)) +
        geom_freqpoly()
      
      ggplot(smaller, aes(color = cut_width(carat, 1, boundary = 0), x = price)) +
        geom_freqpoly() +
        labs(x = "Price", y = "Count", color = "Carat")
    #2. 
      ggplot(smaller, aes(x = carat, y = price)) +
      geom_boxplot(varwidth = TRUE, aes(group = cut_width(price, 2500)))

      ggplot(diamonds, aes(x = cut_number(price, 10), y = carat)) +
        geom_boxplot() +
        coord_flip() +
        xlab("Price")      
        #10 bins with an equal number of observations, and the width determined by the number of observations
      
      ggplot(diamonds, aes(x = cut_width(price, 2000, boundary = 0), y = carat)) +
        geom_boxplot(varwidth = TRUE) +
        coord_flip() +
        xlab("Price")
      #10 equal-width bins of $2,000. The argument boundary = 0 ensures that first bin is $0–$2,000
 
    #4. 
      ggplot(diamonds, aes(x = carat, y = price)) +
        geom_bin2d() +
        facet_wrap(~cut)

      ggplot(diamonds, aes(x = cut_number(carat, 5), y = price, colour = cut)) +
        geom_boxplot()
      
    #5. 
      ggplot(data = diamonds) +
        geom_point(mapping = aes(x = x, y = y)) +
        coord_cartesian(xlim = c(4, 11), ylim = c(4, 11))
      
      #Here, x and y have a strong relationship
      #A binned plot would not reveal outliers, and may lead us to conclude that the largest value of x was an outlier even though it appears to fit the bivariate pattern well.
    
    #6. 
      ggplot(smaller, aes(x = carat, y = price)) +
        geom_boxplot(aes(group = cut_number(carat, 20)))
      #The boxes contain roughly equal number of points
      
#Patterns and models
  #Question if you see a pattern
    #1. Could it be due to chance?
    #2. How can you describe the relationship implied by the pattern?
    #3. How strong is the relationship?
    #4. What other variables might affect the relationship?
    #5. Does the relationship change if you look at individual subgroups of the data?
  #Patterns provide clues about relationships (that is, they reveal covariation)
  
  #ex. in diamonds dataset, cut and carat, carat and price are tightly related
    #How do we find the relationship betwen cut and price?
    #Use a model to remove the relation between price and carat
      #Following model predicts price from carat, then computes residuals (difference between predicted and actual)
      #Residuals show us price of diamond once the effects of carat is removed
      #log-transform first then later e residuals to get back to scale
      library(tidymodels)
      diamonds <- diamonds |>
        mutate(
          log_price = log(price),
          log_carat = log(carat)
        )
        
      diamonds_fit <- linear_reg() |>
        fit(log_price ~ log_carat, data = diamonds)
      
      diamonds_aug <- augment(diamonds_fit, new_data = diamonds) |>
        mutate(.resid = exp(.resid))
      
      ggplot(diamonds_aug, aes(x = carat, y = .resid)) +
        geom_point()

      #Now you can run without relationship between carat and price
      ggplot(diamonds_aug, aes(x = cut, y = .resid)) +
        geom_boxplot()
      
