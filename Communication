#Communication
  #Make plots as self-explanatory as possible

library(tidyverse)
library(scales)
library(ggrepel)
library(patchwork)

#Labels
  #Add labels with labs() function
    ggplot(mpg, aes(x = displ, y = hwy)) +
      geom_point(aes(color = class)) +
      geom_smooth(se = FALSE) + 
      labs(
        x = "Engine displacement (L)",
        y = "Highway fuel econmy (mmp)",
        color = "Car type",
        title = "Fuel efficiency generally decreases with engine size",
        subtitle = "Two seaters (sports cars) are an exception because of their light weight",
        caption = "Data from fueleconomy.gov"
      )
  #Avoid titles that just describe what the plot is (ex. scatterplot of y vs x)
    #Instead, summarize main finding
    #Subtitle to add additional info beneath title
    #Caption is often used to describe the source of the data (bottom right)
    #Replace short variable names with detailed descriptions and use units (x, y, legend)
    #To use math equations switch "" out for quote()
      df <- tibble(
        x = 1:10,
        y = cumsum(x^2)
      )
      ggplot(df, aes(x,y)) +
        geom_point() +
        labs(
          x = quote(x[i]),
          y = quote(sum(x[i]^2, i == 1, n))
        )
      
  #Exercises
    #1. 
      ggplot(mpg, aes(x = class)) +
        geom_bar() +
        labs(
          x = "Class of car",
          title = "Number of car by class",
          subtitle = "That's a lot of suvs",
          caption = "Personally, I prefer compact cars"
        )
    #2. The point of interest here is combining color and shape with identical names
      ggplot(mpg, aes(x = cty, y = hwy)) +
        geom_point(aes(shape = drv, color = drv)) +
        labs(
          x = "City MPG",
          y = "Highway MPG",
          color = "Type of drive train",
          shape = "Type of drive train"
        )
      
#Annotations
  #Labeling individual obs or groups of obs
    #Use geom_text()
    #Two possible source of labels:
      #1. Have a tibble that provides labels
        #Pull out cars with the highest engine size in each drive type and save info as new data
        label_info <- mpg |>
          group_by(drv) |>
          arrange(desc(displ)) |>
          slice_head(n = 1) |>
          mutate(
            drive_type = case_when(
              drv == "f" ~ "front-wheel drive",
              drv == "r" ~ "rear-wheel drive",
              drv == "4" ~ "4-wheel drive"
            )
         ) |>
        select(displ, hwy, drv, drive_type)
        #Use this data frame to replace the legend with these labels directly
        ggplot(mpg, aes(x = displ, y = hwy, color = drv)) +
          geom_point(alpha = 0.3) +
          geom_smooth(se = FALSE) +
          geom_text(
            data = label_info, 
            aes(x = displ, y = hwy, label = drive_type),
            fontface = "bold", size = 5, hjust = "right", vjust = "bottom"
          ) +
          theme(legend.position = "none") #Turns off legends
        #hjust (horazontal justification) and vjust (vertical justification) to control alignment
        #The above graph, the labels overlap with each other and the points
          #Use geom_label_repel() from ggrepel to address
        ggplot(mpg, aes(x = displ, y = hwy, color = drv)) +
          geom_point(alpha = 0.3) +
          geom_smooth(se = FALSE) +
          geom_label_repel(        #This!
            data = label_info, 
            aes(x = displ, y = hwy, label = drive_type),
            fontface = "bold", size = 5, nudge_y = 2
          ) +
          theme(legend.position = "none")
       #geom_text_repel() from ggrepel can be used to highlight certain points
        potential_outliers <- mpg |>
          filter(hwy > 40 | (hwy > 20 & displ > 5))
        
        ggplot(mpg, aes(x = displ, y = hwy)) +
          geom_point() +
          geom_text_repel(data = potential_outliers, aes(label = model)) +
          geom_point(data = potential_outliers, color = "red") +
          geom_point(
            data = potential_outliers,
            color = "red", size = 3, shape = "circle open"
          )
      #2. 
       #Other functions for annotation:
          #geom_hline() and geom_vline(): add reference lines. Make them thick(2) and white 
          #geom_rect(): Draw a rectangle around points of interest (xmin, xmax, ymin, ymax)
            #geom_mark_hull() for annotating subsets of points with hulls
          #geom_segment(): with arrow argument to point with an arrow (x, y, xend, yend)
          #annotate(): add 1-3 annotation elements to a plot (rather than highlighting)
           trend_text <- "Larger engine sizes tend to have lower fuel economy." |>
              str_wrap(width = 30) #to automatically add line breaks to 30 characters per line
            trend_text
            
            ggplot(mpg, aes(x = displ, y = hwy)) +
              geom_point() +
              annotate(
                geom = "label", x = 3.5, y = 38, #Adds the dialogue
                label = trend_text,
                hjust = "left", color = "red"
              ) +
              annotate(
                geom = "segment", #Adding an arrow
                x = 3, y = 35, xend = 5, yend = 25, color = "red",
                arrow = arrow(type = "closed")
              )
  
  #Exercises
    #1. Use geom_text() with infinite positions to place text at the four corners of the plot.
            label <- tribble(
              ~displ, ~hwy, ~label, ~vjust, ~hjust,
              Inf, Inf, "Top right", "top", "right",
              Inf, -Inf, "Bottom right", "bottom", "right",
              -Inf, Inf, "Top left", "top", "left",
              -Inf, -Inf, "Bottom left", "bottom", "left"
            )
            
            ggplot(mpg, aes(displ, hwy)) +
              geom_point() +
              geom_text(aes(label = label, vjust = vjust, hjust = hjust), data = label)
    #2. Use annotate() to add a point geom in the middle of your last plot without having to create a tibble. 
        ggplot(mpg, aes(x = displ, y = hwy)) +
          geom_point() +
          annotate(
            geom = "point", 
            x = 4.5, y = 22.5, color = "red"
          )
    #3. The same appears on all facets
        ggplot(mpg, aes(x = displ, y = hwy)) +
          geom_point() +
          annotate(
            geom = "label", x = 5, y = 40, 
            label = "Something"
          ) +
          facet_wrap(~drv)

#Scale
  #Default scales
    #Default are:
      ggplot(mpg, aes(x = displ, y = hwy)) +
        geom_point(aes(color = class)) +
        scale_x_continuous() +
        scale_y_continuous() +
        scale_color_discrete()
    #Naming scheme is scale_(aesthetic)_(scale)
      #Scale is continuous, discrete, datetime, or date (based on var type)
    #When to override defaults
      #Tweak some parameters of default
      #Replace the scale with a completely different algorithm
  #Axis ticks and legend keys
    #Guides: axes and legends
    #Breaks: control position of ticks
    #Labels: controls the text label associated with each tick/key
      ggplot(mpg, aes(x = displ, y = hwy, color = drv)) +
        geom_point() +
        scale_y_continuous(breaks = seq(15, 40, by = 5))
    #Can set labels to NULL to suppress
      #Useful for maps or plots where you can't share numbers
    #For discrete scales for categorical var, labels can be list of existing labels and desired labels
      ggplot(mpg, aes(x = displ, y = hwy, color = drv)) +
        geom_point() +
        scale_x_continuous(labels = NULL) +
        scale_y_continuous(labels = NULL) +
        scale_color_discrete(labels = c("4" = "4-wheel", "f" = "front", "r" = "rear"))
    #Labels argument + labeling function can be used for formatting numbers as currency, percent, etc.
      ggplot(diamonds, aes(x = price, y = cut)) +
        geom_boxplot(alpha = 0.05) +
        scale_x_continuous(
          labels = label_dollar(), #Adds $ and comma separator
          #labels = label_dollar(scale = 1/1000, suffix = K)  to get 5K 10K 15K
          breaks = seq(1000, 19000, by = 6000)
        )
    #label_percent()
      ggplot(diamonds, aes(x = cut, fill = clarity)) +
        geom_bar(position = "fill") +
        scale_y_continuous(name = "Percentage", label = label_percent())
    #Use breaks with few datapoints to highlight exactly where obs are
      presidential |>
        mutate(id = 33 + row_number()) |>
        ggplot(aes(x = start, y = id)) +
        geom_point() +
        geom_segment(aes(xend = end, yend = id)) +
        scale_x_date(name = NULL, breaks = presidential$start, date_labels = "'%y")
        #We pulled out the start variable as a vector with presidential$start    
    #Note:specification of breaks and labels for date and datetime scale is different
      #date_labels takes a format specification like parse_datetime()
      #date_breaks takes a string like "2 days" or "1 month
  #Legend layout
    #theme(legend.position = ) to control the overall position of the legend
      base <- ggplot(mpg, aes(x = displ, y = hwy)) +
        geom_point(aes(color = class))
      
      base + theme(legend.position = "right") # the default
      base + 
        theme(legend.position = "bottom") +
        guides(color = guide_legend(nrow = 3))
      #legend.position = none to suppress
    #guides() with guide_legend or guide_colorbar to control display of individual legends
      ggplot(mpg, aes(x = displ, y = hwy)) +
        geom_point(aes(color = class)) +
        geom_smooth(se = FALSE) +
        theme(legend.position = "bottom") +
        guides(color = guide_legend(nrow = 2, override.aes = list(size = 4)))
        #nrow controls number of rows the legend uses
        #Override.aes to override aesthetic to make the points bigger
  #Replacing a scale
    #Continuous position scales
      #ex. if you log transform 
        ggplot(diamonds, aes(x = carat, y = price)) +
          geom_bin2d() +
          scale_x_log10() +
          scale_y_log10()
          #This way the axis are not labeled with the transformed values
    #Color scale
      #Two varieties
        #scale_color_*()
        #scale_fill_*()
      #Default: colors evenly spaced around the color wheel
      #ColorBrewer scales for color blindness
        ggplot(mpg, aes(x = displ, y = hwy)) +
          geom_point(aes(color = drv, shape = drv)) +
          scale_color_brewer(palette = "Set1")
      #scale_color_manual(): when you have predefined mapping between value and colors
        presidential |>
          mutate(id = 33 + row_number()) |>
          ggplot(aes(x = start, y = id, color = party)) +
          geom_point() +
          geom_segment(aes(xend = end, yend = id)) +
          scale_color_manual(values = c(Republican = "#E81B23", Democratic = "#00AEF3"))
      #scale_color_gradient() or scale_fill_gradient for continuous color
      #scale_color_gradient2() for diverging scale
        #Give positive and negative values different colors, for example
      #Viridis color scales
        df <- tibble(
          x = rnorm(10000),
          y = rnorm(10000)
        )
        
        ggplot(df, aes(x, y)) +
          geom_hex() +
          coord_fixed() +
          labs(title = "Default, continuous", x = NULL, y = NULL)
        
        ggplot(df, aes(x, y)) +
          geom_hex() +
          coord_fixed() +
          scale_fill_viridis_c() +
          labs(title = "Viridis, continuous", x = NULL, y = NULL)
        
        ggplot(df, aes(x, y)) +
          geom_hex() +
          coord_fixed() +
          scale_fill_viridis_b() +
          labs(title = "Viridis, binned", x = NULL, y = NULL)
  #Zooming
    #Ways to control plot limits
      #1. Adjusting what data are plotted
      #2. Setting the limits in each scale
      #3. Setting xlim and ylim in coord_cartesian()
    #To zoom in on a region of the plot, use coord_cartesian()
        ggplot(mpg, aes(x = displ, y = hwy)) +
          geom_point(aes(color = drv)) +
          geom_smooth() +
          coord_cartesian(xlim = c(5, 6), ylim = c(10, 25))
    #To expand limits, sett the limits on individual scales
      #Useful for matching scales across different plots
      #Train the scales with the limits of the full data
        suv <- mpg |> filter(class == "suv")
        compact <- mpg |> filter(class == "compact")
        x_scale <- scale_x_continuous(limits = range(mpg$displ))
        y_scale <- scale_y_continuous(limits = range(mpg$hwy))
        col_scale <- scale_color_discrete(limits = unique(mpg$drv))
        
        ggplot(suv, aes(x = displ, y = hwy, color = drv)) +
          geom_point() +
          x_scale +
          y_scale +
          col_scale
        
        ggplot(compact, aes(x = displ, y = hwy, color = drv)) +
          geom_point() +
          x_scale +
          y_scale +
          col_scale
        
  #Exercises
    #It does not override the default scale because the colors in `geom_hex()` are set by `fill` not `color'
        df <- tibble(
          x = rnorm(10000),
          y = rnorm(10000)
        )
        
        ggplot(df, aes(x, y)) +
          geom_hex() +
          scale_color_gradient(low = "white", high = "red") +
          coord_fixed()
    #2. Scale and labs are equivilent
    #3. 
        presidential |>
          mutate(id = 33 + row_number()) |>
          ggplot(aes(x = start, y = name, color = party)) +
          geom_point() +
          geom_segment(aes(xend = end, yend = name)) +
          scale_color_manual( values = c(Republican = "red", Democratic = "blue")) +
          scale_x_date(name = NULL, breaks = presidential$start, date_labels = "'%y") +
        #Improve display of the y axis
          scale_y_discrete(
            name = "Identification",
            breaks = seq(34, 45, by = 1)
            ) 

        #Label each term with the name of the president
          #Combine name and ID so that they both appear as 1 categorical var
        
